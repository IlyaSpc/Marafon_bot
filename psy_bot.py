import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import requests
import json
import os  # –î–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from aiohttp import web  # –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Render

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
scheduler = AsyncIOScheduler()
scheduler.start()

# URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ GitHub
MESSAGES_URL = "https://raw.githubusercontent.com/IlyaSpc/Marafon_bot/main/messages.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ–±–ª–∞–∫–∞
def load_messages():
    response = requests.get(MESSAGES_URL)
    if response.status_code == 200:
        return response.json()
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–±–ª–∞–∫–∞")
        return {
            "start": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ù–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å!",
            "day_0_goal": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –£—Ç–æ—á–Ω–∏ —Ü–µ–ª—å –ø–æ SMART.",
            "day_0_smart": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ó–∞–≤—Ç—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º!",
            "day_1_start": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞–ø–∏—à–∏ 7 –ø–æ—á–µ–º—É."
        }

messages = load_messages()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        marathon_day INTEGER DEFAULT 0,
        last_message_time TEXT,
        goal TEXT,
        payment_status TEXT DEFAULT 'pending'
    )""")
    conn.commit()
    conn.close()

init_db()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class MarathonStates(StatesGroup):
    DAY_0_GOAL = State()
    DAY_0_SMART = State()
    DAY_1_Q1 = State()
    DAY_1_Q2 = State()
    DAY_2_Q1 = State()
    DAY_2_Q2 = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminder(user_id, message_text):
    try:
        await bot.send_message(user_id, message_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def schedule_reminders(user_id, state_name):
    scheduler.add_job(
        send_reminder,
        'date',
        run_date=datetime.now() + timedelta(hours=3),
        args=[user_id, "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π —Å–≤–æ–π —É—Å–ø–µ—Ö! –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω! üí™"],
        id=f"reminder_3h_{user_id}_{state_name}"
    )
    scheduler.add_job(
        send_reminder,
        'date',
        run_date=datetime.now() + timedelta(hours=6),
        args=[user_id, "–†–∞–∑–±–æ—Ä —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ! –ù–∞–ø–∏—à–∏ –∏—Ö —Å–µ–π—á–∞—Å! üöÄ"],
        id=f"reminder_6h_{user_id}_{state_name}"
    )

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
def remove_reminders(user_id, state_name):
    try:
        scheduler.remove_job(f"reminder_3h_{user_id}_{state_name}")
        scheduler.remove_job(f"reminder_6h_{user_id}_{state_name}")
    except Exception:
        pass

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, marathon_day) VALUES (?, ?, ?, ?, ?)",
              (user_id, username, first_name, last_name, 0))
    conn.commit()
    conn.close()

    await message.answer(messages["start"])
    await MarathonStates.DAY_0_GOAL.set()
    schedule_reminders(user_id, "DAY_0_GOAL")

# –î–µ–Ω—å 0: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ü–µ–ª–∏
@dp.message_handler(state=MarathonStates.DAY_0_GOAL)
async def process_day_0_goal(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    goal = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –≤ –±–∞–∑—É
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("UPDATE users SET goal = ? WHERE user_id = ?", (goal, user_id))
    conn.commit()
    conn.close()

    remove_reminders(user_id, "DAY_0_GOAL")

    await message.answer(messages["day_0_goal"])
    await MarathonStates.DAY_0_SMART.set()
    schedule_reminders(user_id, "DAY_0_SMART")

@dp.message_handler(state=MarathonStates.DAY_0_SMART)
async def process_day_0_smart(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    remove_reminders(user_id, "DAY_0_SMART")

    await message.answer(messages["day_0_smart"])
    await state.finish()

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å –≤ –±–∞–∑–µ
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("UPDATE users SET marathon_day = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

# –î–µ–Ω—å 1: –û—Å–æ–∑–Ω–∞–Ω–∏–µ ‚Äî –∑–∞—á–µ–º –≤–∞–º —ç—Ç–∞ —Ü–µ–ª—å?
@dp.message_handler(lambda message: True, state=None)
async def day_1_start(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT marathon_day FROM users WHERE user_id = ?", (user_id,))
    day = c.fetchone()[0]
    conn.close()

    if day == 1:
        await message.answer(messages["day_1_start"])
        await MarathonStates.DAY_1_Q1.set()
        schedule_reminders(user_id, "DAY_1_Q1")
    elif day == 2:
        await day_2_start(message)

@dp.message_handler(state=MarathonStates.DAY_1_Q1)
async def process_day_1_q1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    remove_reminders(user_id, "DAY_1_Q1")

    await message.answer(
        "üî• –ö—Ä—É—Ç–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —á–µ—Ç–∫–æ –ø–æ–Ω–∏–º–∞–µ—à—å, –∑–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–∞ —Ü–µ–ª—å.\n"
        "–ù–∞–ø–æ—Å–ª–µ–¥–æ–∫ –Ω–∞–ø–∏—à–∏ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: '–ó–∞—á–µ–º –º–Ω–µ —ç—Ç–æ?'\n\n"
        "(–ü—Ä–∏–º–µ—Ä: '–Ø —Ö–æ—á—É –º–∞—à–∏–Ω—É, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ —Å–≤–æ–±–æ–¥–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è. –Ø —Å–º–æ–≥—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∂–∏—Ç—å —Ç–∞–º, –≥–¥–µ —Ö–æ—á—É. –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ.')"
    )
    await MarathonStates.DAY_1_Q2.set()
    schedule_reminders(user_id, "DAY_1_Q2")

@dp.message_handler(state=MarathonStates.DAY_1_Q2)
async def process_day_1_q2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    remove_reminders(user_id, "DAY_1_Q2")

    await message.answer(
        "üî• –¢—ã –º–æ–ª–æ–¥–µ—Ü! –°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥. –ó–∞–≤—Ç—Ä–∞ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–∞ —Ü–µ–ª—å —Ç–≤–æ—è! üéØ\n\n"
        "üí° –°–æ–≤–µ—Ç: –ø–æ–¥—É–º–∞–π —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ –º–µ—à–∞–ª–æ —Ç–µ–±–µ —Ä–∞–Ω—å—à–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —ç—Ç–æ–π —Ü–µ–ª–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –∑–∞–≤—Ç—Ä–∞!"
    )
    await state.finish()

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("UPDATE users SET marathon_day = 2 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

# –î–µ–Ω—å 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–≤–æ—è –ª–∏ —ç—Ç–æ —Ü–µ–ª—å?
async def day_2_start(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT marathon_day FROM users WHERE user_id = ?", (user_id,))
    day = c.fetchone()[0]
    conn.close()

    if day == 2:
        await message.answer(
            "–î–µ–Ω—å 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–≤–æ—è –ª–∏ —ç—Ç–æ —Ü–µ–ª—å?\n\n"
            "‚ùì –û—Ç–≤–µ—Ç—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:\n"
            "1Ô∏è‚É£ –û—Ç–∫—É–¥–∞ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–æ—Å—å —ç—Ç–æ –∂–µ–ª–∞–Ω–∏–µ? –ö—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–∏–ª –Ω–∞ —ç—Ç—É —Ü–µ–ª—å?\n"
            "2Ô∏è‚É£ –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥(–ª–∞) —ç—Ç–æ–π —Ü–µ–ª–∏. –ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å?\n"
            "3Ô∏è‚É£ –ï—Å–ª–∏ –±—ã –Ω–∏–∫—Ç–æ –æ–± —ç—Ç–æ–º –Ω–µ –∑–Ω–∞–ª, —Ç—ã –±—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—Ç—Ä–µ–º–∏–ª—Å—è(–∞—Å—å) –∫ —ç—Ç–æ–º—É?\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç!"
        )
        await MarathonStates.DAY_2_Q1.set()
        schedule_reminders(user_id, "DAY_2_Q1")

@dp.message_handler(state=MarathonStates.DAY_2_Q1)
async def process_day_2_q1(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    remove_reminders(user_id, "DAY_2_Q1")

    await message.answer(
        "üîç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≥–ª—É–±–∂–µ —Ä–∞–∑–±–µ—Ä–µ–º —Ç–≤–æ–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è.\n"
        "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã –ø–æ–Ω—è–ª(–∞), —á—Ç–æ —Ü–µ–ª—å –Ω–µ —Å–æ–≤—Å–µ–º —Ç–≤–æ—è, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–µ.\n\n"
        "‚ú® –ó–∞–¥–∞–Ω–∏–µ: –ü–æ–¥—É–º–∞–π, –∫–∞–∫ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —Ü–µ–ª–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ 100% —Ç–≤–æ–µ–π.\n"
        "–ó–∞–ø–∏—à–∏ –µ–µ –≤ –Ω–æ–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ!\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "‚ùå '–•–æ—á—É –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 500 000 –≤ –º–µ—Å—è—Ü, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –∫—Ä—É—Ç–æ.'\n"
        "‚úÖ '–•–æ—á—É –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 500 000 –≤ –º–µ—Å—è—Ü, —á—Ç–æ–±—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–±–æ–¥—É –∏ –≤—ã–±–∏—Ä–∞—Ç—å, –≥–¥–µ –∂–∏—Ç—å.'\n\n"
        "–ù–∞–ø–∏—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–≤–æ–µ–π —Ü–µ–ª–∏!"
    )
    await MarathonStates.DAY_2_Q2.set()
    schedule_reminders(user_id, "DAY_2_Q2")

@dp.message_handler(state=MarathonStates.DAY_2_Q2)
async def process_day_2_q2(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    remove_reminders(user_id, "DAY_2_Q2")

    await message.answer(
        "üî• –°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –Ω–∞—Å—Ç–æ—è—â–∞—è, —Ç–≤–æ—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ü–µ–ª—å! –¢—ã —Å—Ç–∞–ª(–∞) –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é. üí™\n\n"
        "–≠—Ç–æ –ø–æ–∫–∞ –∫–æ–Ω–µ—Ü –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞. –ù–∞–ø–∏—à–∏, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ –ø–µ—Ä–≤—ã—Ö –¥–Ω—è—Ö!"
    )
    await state.finish()

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("UPDATE users SET marathon_day = 3 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def health_check(request):
    return web.Response(text="Bot is running")

async def setup_webserver():
    app = web.Application()
    app.add_routes([web.get('/', health_check)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PORT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"Web server started on port {port}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(setup_webserver())
    executor.start_polling(dp, skip_updates=True, loop=loop)